{"version":3,"sources":["MapContainer.js","BMapComponent.js","TLYComponent.js","App.js","reportWebVitals.js","index.js"],"names":["MapComponent","AMapLoader","load","key","then","AMap","map","Map","resizeEnable","plugin","geolocation","Geolocation","enableHighAccuracy","timeout","maximumAge","convert","showButton","buttonPosition","buttonOffset","Pixel","showMarker","showCircle","panToLocation","zoomToAccuracy","addControl","getCurrentPosition","status","result","document","getElementById","innerHTML","str","push","position","location_type","accuracy","isConverted","join","message","originMessage","catch","e","console","log","className","style","zIndex","background","width","height","right","top","padding","id","Component","BMapComponent","setMap","this","newpointx","newpointy","BMapGL","window","data","getStatus","marker","Marker","point","addOverlay","label","Label","offset","Size","setLabel","setCenter","lng","lat","Geocoder","getLocation","Point","addComp","addressComponents","alert","province","city","district","street","streetNumber","ref","center","enableDoubleClickZoom","enableDragging","enableRotate","enableScrollWheelZoom","zoom","TLYComponent","deviceorientation","addEventListener","event","alpha","beta","gamma","isSafari","test","navigator","userAgent","requestPermission","DeviceOrientationEvent","permissionState","error","onClick","App","defaultActiveKey","items","children","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f50d5ebd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport AMapLoader from '@amap/amap-jsapi-loader';\nimport './MapContainer.css';\n\nclass MapComponent extends Component {\n    // 2.dom渲染成功后进行map对象的创建\n    componentDidMount() {\n        AMapLoader.load({\n            key: '0453040a9b38e88e819ff8ed3ac82b3a', //需要设置您申请的key\n        }).then((AMap) => {\n            var map = new AMap.Map('container', {\n                resizeEnable: true\n            });\n\n            AMap.plugin('AMap.Geolocation', function () {\n                var geolocation = new AMap.Geolocation({\n                    enableHighAccuracy: true,//是否使用高精度定位，默认:true\n                    timeout: 10000,          //超过10秒后停止定位，默认：无穷大\n                    maximumAge: 0,           //定位结果缓存0毫秒，默认：0\n                    convert: true,           //自动偏移坐标，偏移后的坐标为高德坐标，默认：true\n                    showButton: true,        //显示定位按钮，默认：true\n                    buttonPosition: 'LB',    //定位按钮停靠位置，默认：'LB'，左下角\n                    buttonOffset: new AMap.Pixel(10, 20),//定位按钮与设置的停靠位置的偏移量，默认：Pixel(10, 20)\n                    showMarker: true,        //定位成功后在定位到的位置显示点标记，默认：true\n                    showCircle: true,        //定位成功后用圆圈表示定位精度范围，默认：true\n                    panToLocation: true,     //定位成功后将定位到的位置作为地图中心点，默认：true\n                    zoomToAccuracy: true      //定位成功后调整地图视野范围使定位位置及精度范围视野内可见，默认：false\n                })\n\n                map.addControl(geolocation);\n\n                geolocation.getCurrentPosition(function (status, result) {\n                    if (status === 'complete') {\n                        document.getElementById('status').innerHTML = '定位成功'\n                        var str = [];\n                        str.push('定位结果：' + result.position);\n                        str.push('定位类别：' + result.location_type);\n                        if (result.accuracy) {\n                            str.push('精度：' + result.accuracy + ' 米');\n                        }//如为IP精确定位结果则没有精度信息\n                        str.push('是否经过偏移：' + (result.isConverted ? '是' : '否'));\n                        document.getElementById('result').innerHTML = str.join('<br>');\n                    } else {\n                        document.getElementById('status').innerHTML = '定位失败'\n                        document.getElementById('result').innerHTML = '失败原因排查信息:' + result.message + '</br>浏览器返回信息：' + result.originMessage;\n                    }\n                });\n            })\n\n\n        }).catch(e => {\n            console.log(e);\n        })\n    }\n\n    render() {\n        // 1.创建地图容器\n        return (\n            <div className=\"home_div\">\n                <div style={{ zIndex: 2, background: 'white', width: 350, height: 150, position: 'absolute', right: 10, top: 10, padding: 10 }}>\n                    <h4 id=\"status\"></h4>\n                    <p id=\"result\"></p>\n                </div>\n                <div id=\"container\" className=\"container\" style={{ height: '100%' }} />\n            </div >\n        );\n    }\n\n}\nexport default MapComponent;\n\n\n","import React, { Component } from 'react';\nimport { Map } from 'react-bmapgl';\n\nclass BMapComponent extends Component {\n    componentDidMount() {\n        if (!this.map) return;\n        var map = this.map;\n        var BMapGL = window.BMapGL;\n        var geolocation = new BMapGL.Geolocation();\n        var newpointx;\n        var newpointy;\n        geolocation.getCurrentPosition(function (data) {\n            if (this.getStatus() === 0) {\n                var marker = new BMapGL.Marker(data.point);\n                map.addOverlay(marker);\n                var label = new BMapGL.Label(\"\", { offset: new BMapGL.Size(10, -10) });\n                marker.setLabel(label); //添加百度label\n                map.setCenter(data.point);\n              \n                newpointx = data.point.lng;\n                newpointy = data.point.lat;\n \n                // 创建地理编码实例      \n                var myGeo = new BMapGL.Geocoder();\n                // 根据坐标得到地址描述    \n                myGeo.getLocation(new BMapGL.Point(newpointx, newpointy), function (result) {\n                    if (result) {\n                        //alert(result.address);\n                        var addComp = result.addressComponents;\n                        alert( addComp.province + addComp.city  + addComp.district + addComp.street + addComp.streetNumber);\n                    }\n                });\n            }\n            else {\n                alert('failed' + this.getStatus());\n            }\n        });\n\n    }\n\n    setMap = (map) => {\n        this.map = map;\n    }\n\n    render() {\n        return (\n            <Map\n                style={{ height: '90vh' }}\n                ref={ref => this.setMap(ref.map)}\n                center={{ lng: 121.389183, lat: 31.166577 }}\n                enableDoubleClickZoom={true}\n                enableDragging={true}\n                enableRotate={true}\n                enableScrollWheelZoom={true}\n                zoom={15}\n            />\n        )\n    }\n}\n\nexport default BMapComponent;","import React, { Component } from 'react';\n\nclass TLYComponent extends Component {\n    componentDidMount() {\n        if (this.isSafari()) return;\n        this.deviceorientation();\n    }\n\n    deviceorientation = () => {\n        window.addEventListener('deviceorientation', (event) => {\n            document.getElementById('alpha').innerHTML = `X：${event.alpha}`\n            document.getElementById('beta').innerHTML = `Y：${event.beta}`\n            document.getElementById('gamma').innerHTML = `Z：${event.gamma}`\n            // document.getElementById(\"heading\").innerHTML = `指北针指向：${event.webkitCompassHeading}度`;  \n            // document.getElementById(\"accuracy\").innerHTML = `指北针精度：${event.webkitCompassAccuracy}度`;\n        }, false);\n    }\n\n    isSafari = () => {\n        return /Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent);\n    }\n\n    requestPermission = () => {\n        if (typeof DeviceOrientationEvent.requestPermission === 'function') {\n            DeviceOrientationEvent.requestPermission()\n                .then(permissionState => {\n                    if (permissionState === 'granted') {\n                        alert('授权成功')\n                        this.deviceorientation();\n                    }\n                })\n                .catch(console.error);\n        } else {\n            alert('handle regular non iOS 13+ devices')\n        }\n    }\n\n    render() {\n        return (\n            <div style={{ padding: 10 }}>\n\n                {\n                    this.isSafari() && <>ios13+需授权，ios13以下无法获取陀螺仪信息<br/>\n                    <button onClick={this.requestPermission}>授权</button></>\n                }\n                <h4 id='alpha'></h4>\n                <h4 id='beta'></h4>\n                <h4 id='gamma'></h4>\n                <h4 id='heading'></h4>\n                <h4 id='accuracy'></h4>\n            </div>\n        )\n    }\n}\n\nexport default TLYComponent;","import './App.css';\nimport MapComponent from './MapContainer';\nimport BMapComponent from './BMapComponent';\nimport TLYComponent from './TLYComponent';\nimport { Tabs } from 'antd';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tabs\n        defaultActiveKey=\"1\"\n        items={[\n          {\n            label: `陀螺仪`,\n            key: '1',\n            children: <TLYComponent></TLYComponent> \n          },\n          {\n            label: `高德地图`,\n            key: '2',\n            children: <MapComponent></MapComponent>\n          },\n          {\n            label: `百度地图`,\n            key: '3',\n            children: <BMapComponent></BMapComponent> \n          }\n        ]}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App></App>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();\n\n"],"sourceRoot":""}